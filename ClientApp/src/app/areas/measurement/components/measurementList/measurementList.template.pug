doctype html

.actions
    .btn-spaced
        button.btn.btn-outline-info(
            *ngFor='let action of actions',
            (click)='onActionClick(action)'
        ) {{ action }}
    .btn-group(
        *ngIf='isMeasurementsSentFlagActive$ | async'
    )
        button.btn.btn-success(
            type='button',
            (click)='onSendMeasurementsClick()',
            [disabled]='!(isAnyMeasurementSelectedToSend$ | async)',
        ) Send {{ selectedMeasurementsCount$ | async }}
        button.btn.btn-success.dropdown-toggle.dropdown-toggle-split(
            type='button',
            data-toggle='dropdown',
            aria-haspopup='true',
            aria-expanded='false'
        )
            span.sr-only Toggle Dropdown
        .dropdown-menu
            button.dropdown-item(
                type='button',
                (click)='onSelectMeasurementsClick(false)'
            ) Cancel
    button.btn.btn-success(
        *ngIf='!(isMeasurementsSentFlagActive$ | async)',
        (click)='onSelectMeasurementsClick(true)'
    ) Send
hr

.accordion
    input.accordion-switcher#filters-display(type='checkbox')
    label.accordion-label(for='filters-display') Measurements filter
    .accordion-tab
        form(
            #filtersForm='ngForm',
            (submit)='applyFilters(filtersForm)'
        )
            .row
                label.col-sm-2.col-form-label-sm Measurement for
                .col-sm-2
                    select.form-control-sm.form-control#month(
                        name='month',
                        [(ngModel)]='filters.month'
                    )
                        ) Month
                        option(
                            *ngFor='let month of months',
                            [ngValue]='month.id'
                        ) {{ month.name }}
                .col-sm-2
                    select.form-control-sm.form-control#year(
                        name='year',
                        [(ngModel)]='filters.year',
                        placeholder='Year'
                    )
                        option(
                            *ngFor='let year of years',
                            [ngValue]='year'
                        ) {{ year }}
            .row
                label.col-sm-2.col-form-label-sm Measurement type
                .col-sm-3
                    select.form-control-sm.form-control#measurementType(
                        name='measurementType',
                        [(ngModel)]='filters.measurementTypeId'
                    )
                        option(
                            *ngFor='let measurementType of (measurementTypes$ | async)',
                            [ngValue]='measurementType.id'
                        ) {{ measurementType.name }}
            .btn-toolbar(
                role='toolbar',
                aria-label='filter buttons'
            )
                .btn-group.mr-2(
                    role='group',
                    aria-label='filter button'
                )
                    button.btn.btn-primary.btn-sm(
                        type='button'
                    ) Filter
                .btn-group.mr-2(
                    role='group',
                    aria-label='clear filter button'
                )
                    button.btn.btn-outline-secondary.btn-sm(
                        type='button',
                        (click)='clearFilters()'
                    ) Clear

div(
    [class.hidden]='isLoading$ | async'
)
    app-measurement-group(
        *ngFor='let measurementGroup of (measurements$ | async)',
        [measurementGroup]='measurementGroup',
        [isSentFlagActive]='isMeasurementsSentFlagActive$',
        (deleteClick)='onDeleteRecordClick($event)',
        (editClick)='onEditRecordClick($event)',
        (typeClick)='onTypeClick($event)',
        (sendFlagClick)='onSendFlagClick($event)',
    )

img.loading-indicator(
    alt='loading..',
    src='images/loading.svg',
    *ngIf='isLoading$ | async'
)